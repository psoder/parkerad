import AccessDenied from "components/AccessDenied";
import Layout from "components/Layout";
import { GetServerSideProps, NextPage } from "next";
import { useSession } from "next-auth/react";
import Head from "next/head";
import prisma from "lib/prisma";
import { getToken } from "next-auth/jwt";
import { User } from "modules/Account/types";
import Account from "modules/Account";
import React from "react";

export const UserContext = React.createContext<User | undefined>(undefined);

const AccountPage: NextPage = ({ usr }: any) => {
  const { data: session, status } = useSession();
  const user = usr as User;

  // If no session exists, display access denied message
  if (!session) {
    return (
      <Layout>
        <AccessDenied />
      </Layout>
    );
  }

  return (
    <>
      <Head>
        <title>Parkerad</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <UserContext.Provider value={user}>
        <Layout>
          <Account />
        </Layout>
      </UserContext.Provider>

      <style global jsx>
        {`
          * {
            color: #696969;
          }
        `}
      </style>
    </>
  );
};

export const getServerSideProps: GetServerSideProps = async ({ req, res }) => {
  const token = await getToken({
    req,
    secret: process.env.NEXTAUTH_SECRET,
  });

  const user = await prisma.user.findUnique({
    where: { id: token?.sub },
    include: {
      locationsAdded: { include: { reviews: true } },
      reviews: { include: { location: true } },
    },
  });

  return {
    props: { usr: JSON.parse(JSON.stringify(user)) },
  };
};

export default AccountPage;
