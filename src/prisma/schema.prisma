// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  image          String?
  email          String?    @unique
  emailVerified  DateTime?
  dateCreated    DateTime   @default(now()) @map("date_created")
  reviews        Review[]
  role           Role       @default(USER)
  accounts       Account[]
  locationsAdded Location[]

  @@map("user")
}

model VerificationToken {
  identifier String   @id @default(auto()) @map("_id") @db.ObjectId
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_token")
}

model Location {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  locationName String       @unique @map("location_name")
  description  String?
  coordinates  Coordinates?
  dateAdded    DateTime     @default(now()) @map("date_added")
  addedBy      User?        @relation(fields: [addedById], references: [id])
  addedById    String?      @map("added_by_id") @db.ObjectId
  image        String?
  reviews      Review[]

  @@map("location")
}

model Review {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  location   Location  @relation(fields: [locationId], references: [id])
  locationId String    @map("location_id") @db.ObjectId
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @map("user_id") @db.ObjectId
  reviewDate DateTime  @default(now()) @map("review_date")
  rating     Int
  comment    String?
  editDate   DateTime? @map("edit_date")

  @@map("review")
}

type Coordinates {
  type        String  @default("Point")
  coordinates Float[]
}
